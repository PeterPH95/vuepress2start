>>>>>>>>>>>>>>>>>>>SQL关键字顺序<<<<<<<<<<<<<<<<<<<<<
https://blog.csdn.net/qq_26442553/article/details/79467243
sql中关键字出现的顺序是：select/from/where/group by/having/order by/limit
SELECT DISTINCT <select_list>
FROM <left_table>
<join_type> JOIN <right_table>
ON <join_condition>
WHERE <where_condition>
GROUP BY <group_by_list>
HAVING <having_condition>
ORDER BY <order_by_condition>
LIMIT <limit_number>

>>>>>>>>>>>>>>>>>>>检索数据<<<<<<<<<<<<<<<<<<<<<
> 查询表中所有信息
select * 
from Customers
> 查询某两列信息
select cust_id,cust_name 
from Customers

> 去重prod_id 
SELECT prod_id 
FROM OrderItems 
GROUP BY prod_id

select distinct prod_id 
from OrderItems


>>>>>>>>>>>>>>>>>>>排序数据<<<<<<<<<<<<<<<<<<<<<
> 查询cust_name 并按cust_name 降序排列，asc : 升序(默认)，desc：降序
select cust_name 
from Customers 
order by cust_name desc

----- 多属性联合排列 ------
>从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID(cust_id) 对结果进行排序，再按订单日期(order_date)倒序排列
select cust_id,order_num 
from Orders 
order by cust_id asc,order_date desc
// 
select quantity,item_price
from OrderItems
order by 1 desc,2 desc;//可以用1，2代替列名quantity,item_price


>>>>>>>>>>>>>>>>>>>过滤数据/分组求和<<<<<<<<<<<<<<<<<<<<<
//(having必须与group by联合使用，处理分组后的数据)
>从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。
select
    prod_id,
    prod_name
from 
    Products
where
    prod_price = 9.49//返回固定价格 	>=, <=, >, <

>返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序
select
    prod_id,
    prod_name
from 
    Products
where// where的用法在order之前
    prod_price between 3 and 6
order by// 考察sql关键词的顺序，order by 的位置位于所有语句的倒数第二，倒数第一是 limit
    prod_price

> 从 OrderItems 表中检索出所有不同且不重复的订单号（order_num），其中每个订单都要包含 100 个或更多的产品。//SQL70
select
  order_num
from
  OrderItems
group by//重复单号合并
  order_num
having sum(quantity) >= 100 // https://www.runoob.com/sql/sql-having.html


>>>>>>>>>>>>>>>>>>>用通配符进行过滤<<<<<<<<<<<<<<<<<<<<<
% 匹配0到多个字符；_ 匹配单个字符；[abc..] 匹配字符列表中任何单一字符；[^abc] 排除
https://www.runoob.com/sql/sql-wildcards.html

> 从 Products 表中检索产品名称（prod_name）和描述（prod_desc），
仅返回描述中包含 toy 一词的产品名称
select prod_name,prod_desc
from Products
where prod_desc like "%toy%" // 'G%'：以G开头的，"%k"：以k结尾的

仅返回描述中未出现 toy 一词的产品，最后按”产品名称“对结果进行排序。
select prod_name,prod_desc
from Products
where prod_desc not like "%toy%"  // not like 排除某
order by prod_name

返回描述中同时出现 toy 和 carrots 的产品
select prod_name,prod_desc
from Products
where prod_desc like "%toy%"
and prod_desc like "%carrots%"
//prod_desc like "%toy%carrots%"// 按先后顺序出现


>>>>>>>>>>>>>>>>>>>设置别名/打折<<<<<<<<<<<<<<<<<<<<<
> 从 Vendors 表中检索vend_id、vend_name、vend_address 和 vend_city，将 vend_name重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address重命名为 vaddress，按供应商名称对结果进行升序排序。
select
  vend_id,
  vend_name vname,// vend_name as vname,
  vend_address vaddress,
  vend_city vcity
from
  Vendors
order by
  vname asc

> 从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。
select
  prod_id, 
  prod_price,
  prod_price * 0.9 as sale_price
from 
  Products 


>>>>>>>>>>>>>>>>>>>使用函数处理数据<<<<<<<<<<<<<<<<<<<<<
> 返回顾客 ID（cust_id）、顾客名称（cust_name）和登录名（user_login），其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成。提示：需要使用函数、拼接和别名。//upper(str)，concat(str1,str2)，substring(str,起始位置,截取字符数)
select 
  cust_id,
  cust_name,
  upper(concat(substring(cust_name,1,2),substring(cust_city,1,3))) as user_login
from Customers


>>>>>>>>>>>>>>>>>>汇总数据/sum<<<<<<<<<<<<<<<<<<<<<
> 确定已售出产品的总数，返回items_ordered列名，表示已售出商品的总数。
select
  sum(quantity) as items_ordered
from
  OrderItems

> 确定 Products 表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为 max_price。
select max(prod_price) max_price
from Products
where prod_price <= 10

> 返回每个订单号（order_num）各有多少行数（order_lines），并按 order_lines对结果进行升序排序。
select
  order_num,
  count(*) as order_lines
from
  OrderItems
group by
  order_num
order by
  order_lines

> SQL87、88


>>>>>>>>>>>>>>>>>>使用子查询<<<<<<<<<<<<<<<<<<<<<
> 返回购买价格为 10 美元或以上产品的顾客列表，结果无需排序。//SQL91
SELECT DISTINCT cust_id
FROM Orders
WHERE order_num IN (
    SELECT order_num
    FROM OrderItems
    WHERE item_price >= 10
)


