import{_ as p,r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app.cf875173.js";const i="/vuepress2start/assets/property.b6e802b7.jpg",u={},r=e(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><h2 id="require与import的区别" tabindex="-1"><a class="header-anchor" href="#require与import的区别" aria-hidden="true">#</a> <code>require</code>与<code>import</code>的区别</h2><ul><li>1.require是CommonJS规范的模块化语法，import是ECMAScript 6规范的模块化语法；</li><li>2.require是运行时加载，import是编译时加载；</li><li>3.require可以写在代码的任意位置，import只能写在文件的最顶端且不可在条件语句或函数作用域中使用；</li><li>4.require通过module.exports导出的值就不能再变化，import通过export导出的值可以改变；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// m1.js</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> foo <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// m2.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./m1.js&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//bar</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//baz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={id:"js-中操作符-和-参考",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#js-中操作符-和-参考","aria-hidden":"true"},"#",-1),v=n("code",null,"!",-1),m=n("code",null,"~~",-1),b=n("code",null,"!!",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!",target:"_blank",rel:"noopener noreferrer"},f=e(`<ul><li>! 会将后面的数据先转成布尔值，然后取反；</li><li>~~ 利用符号进行的类型转换，转换成数字类型；</li><li>~~ 取整的方式比<code>Math.floor()</code>方法更快，正数向下取整，负数向上取整；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">//a = undefined</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>a<span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">//false</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// true  对象类型转为布尔值为true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// true</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span> <span class="token comment">//false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment">// false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token comment">//false</span>

<span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">undefined</span> <span class="token comment">//0</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">null</span> <span class="token comment">//0</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">!</span><span class="token keyword">undefined</span> <span class="token comment">//1</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token comment">//1</span>

<span class="token operator">~</span><span class="token operator">~</span><span class="token boolean">true</span> <span class="token comment">//1</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token boolean">false</span> <span class="token comment">//0</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token string">&quot;&quot;</span> <span class="token comment">//0</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//0</span>

<span class="token operator">~</span><span class="token operator">~</span><span class="token number">1.2</span> <span class="token comment">//1</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token number">1.8</span> <span class="token comment">//1</span>
<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">-</span><span class="token number">1.2</span> <span class="token comment">//-1</span>
<span class="token comment">// | 0 也可以取整,实际就是2进制取或的操作</span>
<span class="token number">1.2</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment">//1</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="的隐式类型转换" tabindex="-1"><a class="header-anchor" href="#的隐式类型转换" aria-hidden="true">#</a> <code>==</code> <code>+</code> 的隐式类型转换</h2><ul><li>类型相同 <ul><li>基本类型，直接比较值</li><li>引用类型比较指针</li></ul></li><li>类型不同，尝试转成number类型 <ul><li>先调用valueOf()转成number</li><li>不行就再用toString()方法转成string</li></ul></li><li>null、NaN、undefined单独一套规则 <ul><li>undefined和null与任何有有意义的值比较都是false <ul><li><code>undefined/null == 0/false/&#39;&#39;</code> ===&gt; false（不会再进行转换）</li></ul></li><li>但<code>null == undefined // true</code> (undefined值是通过null派生出来的，== 时它会自动转化为null，所以返回true。)</li></ul></li><li>补充：+[] 隐式转换为Number 0</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//请听题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//问题1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//问题2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//问题3</span>

<span class="token comment">//问题1：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//step1:右侧转成数字1,变成：</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span>
<span class="token comment">//step2 new String(&#39;abc&#39;).valueOf()不是数字也不是字符串，再调用toString()</span>
<span class="token string">&#39;abc&#39;</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token comment">//step3:字符串转数字</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment">//false,NaN和任何类型比较都为false</span>

<span class="token comment">//问题2：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//step1:右侧转成数字</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token comment">//step2 {}.valueOf()不是数字也不是字符串，再调用toString()</span>
<span class="token string">&#39;[object Object]&#39;</span> <span class="token operator">==</span><span class="token number">1</span> 
<span class="token comment">//step3:字符串转数字</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment">//false,NaN和任何类型比较都为false</span>

<span class="token comment">//问题3:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//step1:!优先级比==高，先转右边,[]是对象类型，转成布尔值为true,!true就是false</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span>
<span class="token comment">//step2:右侧转成数字为0</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span>
<span class="token comment">//step3:左侧是一个对象，valueOf()转出来不是字符也不是字符串，调用toString()，得到空字符串</span>
<span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token comment">//step4:字符串转成数字</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null、undefined和nan" tabindex="-1"><a class="header-anchor" href="#null、undefined和nan" aria-hidden="true">#</a> null、undefined和NaN</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//null、NaN、undefined</span>
<span class="token number">NaN</span><span class="token operator">==</span><span class="token number">NaN</span> <span class="token comment">//false</span>

<span class="token keyword">undefined</span><span class="token operator">==</span><span class="token keyword">null</span> <span class="token comment">//true</span>
<span class="token keyword">null</span><span class="token operator">===</span><span class="token keyword">null</span> <span class="token comment">//true</span>
<span class="token keyword">null</span><span class="token operator">==</span><span class="token keyword">null</span> <span class="token comment">//true</span>
<span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">//true</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">//true</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token comment">//true</span>
<span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null-1-和-undefined-1-的结果" tabindex="-1"><a class="header-anchor" href="#null-1-和-undefined-1-的结果" aria-hidden="true">#</a> null+1 和 undefined+1 的结果？</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>null + 1 ----&gt; 1
undefined + 1 ----&gt; NaN	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断-null-0-和-null-0-的返回值" tabindex="-1"><a class="header-anchor" href="#判断-null-0-和-null-0-的返回值" aria-hidden="true">#</a> 判断 null==0 和 null&gt;=0 的返回值？</h2>`,10),h=n("li",null,"解释一下为什么 第一个是false.第二个是true",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal#%E6%AF%94%E8%BE%83_boolean%E3%80%81null%E3%80%81undefined_%E5%92%8C_nan",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness#%E9%9D%9E%E4%B8%A5%E6%A0%BC%E7%9B%B8%E7%AD%89",target:"_blank",rel:"noopener noreferrer"},j=e(`<blockquote><ol><li><code>null &gt;= 0</code>，首先会先判断<code>null &gt; 0</code>，此时会进行隐式数据类型转换，转为数值类型，<code>Number(null)</code>值为0，<code>0 &gt; 0</code>为<code>false</code>；再判断<code>0 = 0</code>结果为<code>true</code></li><li>直接判断<code>null == 0</code>时不会进行隐式类型转换，直接返回<code>false</code></li><li>总结：<code>null</code>和<code>undefined</code>与出它们自身的其它类型相<code>==</code>时返回<code>false</code></li></ol></blockquote><h2 id="valueof-和-tostring-的特殊调用" tabindex="-1"><a class="header-anchor" href="#valueof-和-tostring-的特殊调用" aria-hidden="true">#</a> <code>valueOf()</code> 和 <code>toString()</code>的特殊调用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * []重写了toString()方法，默认调用join()，<span class="token punctuation">{</span><span class="token punctuation">}</span>未重写toString()返回数据类型
 * valueOf() 返回值为 this 值，将其转换为一个对象
 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [], &#39;&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {}, [object Object] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>typeof返回的类型:number、string、boolean、undefined、function、object共6种。后ES6新又增 symbol 注意：</p><ul><li>其中 Array 与 null 返回的都是 object</li><li>function(){} 与 class{}(类的本质是函数，是构造函数的另一种写法) 返回的都是 function</li><li><code>typeof NaN // &#39;number&#39;</code></li></ul></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断数组类型的方式</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span>
Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name <span class="token comment">// &#39;Array&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型链继承问题" tabindex="-1"><a class="header-anchor" href="#原型链继承问题" aria-hidden="true">#</a> 原型链继承问题</h2><p><img src="`+i+`" alt="图解"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//f.a()?</span>
<span class="token comment">//f.b()?</span>

<span class="token comment">// F instanceof Function ---&gt; true</span>
<span class="token comment">// f instanceof Function ---&gt; false</span>
<span class="token comment">// f instanceof Object ---&gt; true</span>

<span class="token comment">/*
f.__proto__ === [f 构造函数的].prototype === F.prototype
F.prototype.__proto__ === [F.prototype 构造函数的].prototype === Object.prototype ---&gt; 所以 a 可以通过 f.a()访问
f.constructor === F
F.__proto__ === [F 构造函数的].prototype === Function.prototype ---&gt; 所以 b 能通过f.constructor.b()访问
Function.prototype.__proto__ === [Function.prototype 构造函数的].prototype === Object.prototype ---&gt; 所以 a 可以通过 f.constructor.a()访问

综上：f 能取到 a 取不到 b; F 能取到 a,b
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连等-var-a-b-1-声明问题" tabindex="-1"><a class="header-anchor" href="#连等-var-a-b-1-声明问题" aria-hidden="true">#</a> 连等 var a=b=1 声明问题</h2><blockquote><p>语句 var a=b=1 是语句 b = 1 和 var a = b 的简写， b 成为一个全局变量（<strong>没有var前缀</strong>）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">var</span> a<span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token comment">//等于var a = b ,b = 1</span>
 <span class="token comment">//不加var b就是全局变量了(window.b=1)，可以直接访问</span>
 <span class="token comment">//var a是局部变量，在fn里面，外面访问不到</span>
<span class="token punctuation">}</span> 
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//windows全局作用域下找到window.b=1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a在fn里面的作用域，外面访问不了，报错</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="形参和外部变量重名" tabindex="-1"><a class="header-anchor" href="#形参和外部变量重名" aria-hidden="true">#</a> 形参和外部变量重名？</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//题1</span>
<span class="token keyword">var</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* result还是为0，函数test内的result为形参，如果形参改为其它描述，外部的result就会被改变 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="立即执行函数具有独立的作用域" tabindex="-1"><a class="header-anchor" href="#立即执行函数具有独立的作用域" aria-hidden="true">#</a> 立即执行函数具有独立的作用域</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//题2</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;World!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Han Meimei&#39;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 结果输出 &#39;Welcome Han Meimei&#39;</span>

<span class="token comment">// 解析：</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;World!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token punctuation">;</span><span class="token comment">//变量声明提升</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&#39;Han Meimei&#39;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="this-指向问题" tabindex="-1"><a class="header-anchor" href="#this-指向问题" aria-hidden="true">#</a> <code>this</code> 指向问题?</h2><blockquote><ul><li>对于箭头函数：this指向取决于该箭头函数<strong>同级作用域</strong>的this指向，又由于<strong>对象不能形成自己的作用域</strong>，因此其作用域为全局作用域，箭头函数的this初始绑定Window对象</li><li>对于普通函数：this绑定了它的调用者</li></ul></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// window</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// {sayHi:f}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
o2<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态加载javascript脚本" tabindex="-1"><a class="header-anchor" href="#动态加载javascript脚本" aria-hidden="true">#</a> 动态加载<code>javascript</code>脚本</h2>`,20),_={href:"https://juejin.cn/post/6844903567929638920",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取 Dom</span>
<span class="token keyword">var</span> <span class="token constant">HEAD</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;head&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement
<span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token string">&#39;http://xxxxxx.com/resource.js&#39;</span>
<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// script.type = “text/javascript”;</span>

<span class="token comment">// chrome成功回调，非IE浏览器使用</span>
script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加载成功!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// IE 的写法</span>
<span class="token comment">// script.onreadystatechange = function() {</span>
<span class="token comment">//     if(this.readyState === &#39;loaded&#39; || this.readyState === &#39;complete&#39;) {</span>
<span class="token comment">//     if(/^(loaded|complete)$/.test(this.readyState)){</span>
<span class="token comment">//         console.log(&#39;加载成功！&#39;)</span>
<span class="token comment">//     }</span>
<span class="token comment">// }</span>

<span class="token comment">// 失败回调</span>
script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加载失败!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 插入文档</span>
script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>
<span class="token constant">HEAD</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-方法的使用" tabindex="-1"><a class="header-anchor" href="#call-方法的使用" aria-hidden="true">#</a> call()方法的使用？</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* call用来绑定this的指向 */</span>
<span class="token keyword">function</span> <span class="token function">Product</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Food</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//当构造器未使用 new 时,可以当普通函数看待,下面的效果其实是 this.Product(name, price)</span>
  <span class="token comment">//绑定了Product()内部 this 的指向 Food ---&gt; Food.Product(name, price)</span>
  <span class="token function">Product</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">&#39;food&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Toy</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Product</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span> <span class="token string">&#39;toy&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> cheese <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token string">&#39;feta&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Toy</span><span class="token punctuation">(</span><span class="token string">&#39;robot&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="js事件绑定的三种方式" tabindex="-1"><a class="header-anchor" href="#js事件绑定的三种方式" aria-hidden="true">#</a> JS事件绑定的三种方式？</h2><blockquote><ol><li>使用内联</li><li>使用<code>.onclick</code>的方式</li><li>使用事件监听<code>addEventListener(参数1，参数1，参数3)</code> 参数1：事件类型(不需要添加上on) 参数2：事件函数 参数3：是否捕获（布尔值，默认false），true--&gt;捕获方式(外层到内层)，false--&gt;冒泡方式(内--&gt;外)</li></ol></blockquote><p><strong>阻止事件冒泡</strong>：</p><blockquote><ol><li>event.stopPropagation()：可以阻止事件冒泡，阻止触发父级元素的绑定事件</li><li>事件委托：将元素的绑定事件写起其父元素上，防止事件冒泡 ​ &gt; a. 可以大量节省内存占用，减少事件注册，比如在ul上代理所有li的click事件。 ​ &gt; b. 可以实现当新增子对象时无需再次对其绑定（动态绑定事件）</li></ol></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 事件委托具体实现</span>
<span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">&quot;list&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">...</span><span class="token operator">...</span>
  <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item n<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>

<span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ul<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
        <span class="token keyword">var</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token comment">// 获取目标元素</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">==</span> <span class="token string">&#39;LI&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 为按钮绑定点击事件</span>
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 新增li的内容为ul当前子元素的个数</span>
        li<span class="token punctuation">.</span>textContent <span class="token operator">=</span> ul<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事件绑定</strong>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>/* 1. 内联 */
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>按钮<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">var</span> bt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsBytagname</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/* 2. onclick */</span>
	bt<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token comment">/* 3. addEventListener */</span>
    bt<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻止冒泡</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="addeventlistener和正常的onclick-的区别" tabindex="-1"><a class="header-anchor" href="#addeventlistener和正常的onclick-的区别" aria-hidden="true">#</a> <code>addEventlistener</code>和正常的<code>onclick=()=&gt; </code>的区别</h2><ul><li><p>onclick事件在同一时间只能指向唯一对象（重复绑定事件只会使最后绑定的事件响应）</p></li><li><p>addEventListener给一个事件注册多个listener（重复绑定事件会依次从上到下响应）</p><p>addEventListener第一个参数事件类型，第二个类型即绑定的具体事件，第三个参数默认是false，false是冒泡，true时是捕获；</p></li></ul><h2 id="javascript-中的变量声明提升" tabindex="-1"><a class="header-anchor" href="#javascript-中的变量声明提升" aria-hidden="true">#</a> JavaScript 中的变量声明提升？</h2>`,13),q={href:"https://es6.ruanyifeng.com/#docs/let",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; 变量提升是指JS的变量和函数声明会在代码编译期，提升到代码的最前面。 
&gt; 变量提升成立的前提是使用 Var 关键字进行声明的变量，并且变量提升的时候只有声明被提升，赋值并不会被提升，同时函数的声明提升会比变量的提升优先。 
&gt; 变量提升的结果，可以在变量初始化之前访问该变量，返回的是undefined。在函数声明前可以调用该函数。 

加分回答 
&gt; 使用let和const声明的变量是创建提升，形成**暂时性死区**，在初始化之前访问let和const创建的变量会报错。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别" aria-hidden="true">#</a> for in 和 for of 的区别？</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">for in</span><span class="token template-punctuation string">\`</span></span>遍历的是数组的索引（即键名），而<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">for of</span><span class="token template-punctuation string">\`</span></span>遍历的是数组元素值

<span class="token operator">&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">for in</span><span class="token template-punctuation string">\`</span></span>总是得到对象的<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">key</span><span class="token template-punctuation string">\`</span></span>或数组、字符串的下标
            <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> res <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//01 11 21</span>
<span class="token operator">&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">for of</span><span class="token template-punctuation string">\`</span></span>总是得到对象的<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value</span><span class="token template-punctuation string">\`</span></span>或数组、字符串的值
			<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
            arr<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span>
            <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//1 2 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),E={href:"https://juejin.cn/post/6916058482231754765",target:"_blank",rel:"noopener noreferrer"},O=e('<h2 id="object-create-、new-object-和-的区别" tabindex="-1"><a class="header-anchor" href="#object-create-、new-object-和-的区别" aria-hidden="true">#</a> Object.create()、new Object() 和 {} 的区别？</h2><ul><li>字面量和<code>new</code>关键字创建的对象是<code>Object</code>的实例，原型指向<code>Object.prototype</code>，继承内置对象<code>Object</code></li><li><code>Object.create(arg, pro)</code>创建的对象的原型取决于<code>arg</code>，<code>arg</code>为<code>null</code>，新对象是空对象，没有原型，不继承任何对象 <ul><li><code>arg</code>为指定对象，新对象的原型指向指定对象，继承指定对象</li><li>创建一个没有原型的对象：<code>Object.create(null)</code></li></ul></li></ul>',2),S={href:"https://juejin.cn/post/6844903917835436045",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//{}</span>
<span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
objA<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
objA<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> !</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objA<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objA <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">//new Object()</span>
<span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// var objB = Object();</span>
objB<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
objB<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> !</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objB <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token comment">//Object.create()</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">isHuman</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token function-variable function">printIntroduction</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Am I human? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHuman<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> me <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// me.__proto__ === person</span>
me<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Matthew&quot;</span><span class="token punctuation">;</span> <span class="token comment">// name属性被设置在新对象me上，而不是现有对象person上</span>
me<span class="token punctuation">.</span>isHuman <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 继承的属性可以被重写</span>
me<span class="token punctuation">.</span><span class="token function">printIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is Matthew. Am I human? true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function F(B,H){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("h2",k,[d,s(" js 中操作符 "),v,s(),m,s(" 和 "),b,n("a",g,[s("参考"),t(a)])]),f,n("ul",null,[h,n("li",null,[n("a",y,[s("MDN"),t(a)]),n("a",w,[s("MDN"),t(a)])])]),j,n("ul",null,[n("li",null,[n("a",_,[s("参考"),t(a)])])]),x,n("blockquote",null,[n("p",null,[s("Var声明的变量声明提升、函数声明提升、let和const变量不提升["),n("a",q,[s("参考"),t(a)]),s("]")])]),N,n("p",null,[n("a",E,[s("《for in 和 for of 的区别》"),t(a)])]),O,n("blockquote",null,[n("p",null,[n("a",S,[s("参考"),t(a)])])]),A])}const I=p(u,[["render",F],["__file","JavaScript.html.vue"]]);export{I as default};
