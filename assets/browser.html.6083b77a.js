import{_ as o,r as p,o as c,c as l,a as s,b as n,d as t,e}from"./app.cf875173.js";const i="/vuepress2start/assets/load_render.3cef1a2d.png",r="/vuepress2start/assets/async_defer.860b4dd2.png",u={},d=s("h1",{id:"页面加载与渲染",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#页面加载与渲染","aria-hidden":"true"},"#"),n(" 页面加载与渲染")],-1),k=s("h2",{id:"浏览器输入url到页面展示出来的全过程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#浏览器输入url到页面展示出来的全过程","aria-hidden":"true"},"#"),n(" 浏览器输入url到页面展示出来的全过程")],-1),g={href:"https://blog.csdn.net/cute_ming/article/details/124364783?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166640878316782248545658%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166640878316782248545658&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_click~default-2-124364783-null-null.nonecase&utm_term=%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B&spm=1018.2226.3001.4450",target:"_blank",rel:"noopener noreferrer"},h=e('<h2 id="浏览器渲染流程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染流程" aria-hidden="true">#</a> 浏览器渲染流程</h2><blockquote><p>页面生成的过程：</p><ol><li>HTML 被 HTML 解析器解析成 DOM 树；</li><li>CSS 被 CSS 解析器解析成 CSSOM 树；</li><li>结合 DOM 树和 CSSOM 树，生成一棵渲染树(Render Tree)，这一过程称为 Attachment；</li><li>生成布局(flow)，浏览器在屏幕上“画”出渲染树中的所有节点；</li><li>将布局绘制(paint)在屏幕上，显示出整个页面。</li></ol><p>第四步和第五步是最耗时的部分，这两步合起来，就是我们通常所说的渲染。</p></blockquote><p><img src="'+i+`" alt="图解"></p><h2 id="css加载会造成阻塞吗-为什么-做过实验吗-怎么证明" tabindex="-1"><a class="header-anchor" href="#css加载会造成阻塞吗-为什么-做过实验吗-怎么证明" aria-hidden="true">#</a> CSS加载会造成阻塞吗？为什么，做过实验吗？怎么证明？</h2><p><strong>结论</strong>：</p><blockquote><ol><li>css加载不会阻塞DOM树的<strong>解析</strong></li><li>css加载会阻塞DOM树的<strong>渲染</strong></li><li>css加载会阻塞后面js语句的执行</li></ol></blockquote><p>参考：https://juejin.cn/post/6844903667733118983 页面渲染详细流程：https://juejin.cn/post/6844903784229896199</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>/* 代码演示 */
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>css阻塞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">h1</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">function</span> <span class="token function">h</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是红色的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不会阻塞dom解析的资源有哪些" tabindex="-1"><a class="header-anchor" href="#不会阻塞dom解析的资源有哪些" aria-hidden="true">#</a> 不会阻塞DOM解析的资源有哪些？</h2><blockquote><ol><li><code>&lt;script async src=&quot;&quot;&gt;&lt;/script&gt;</code></li><li>image标签</li><li>iframe标签（内嵌网页）</li></ol></blockquote>`,10),m={id:"domcontentloaded和window-onload的触发时机不同在哪-参考",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#domcontentloaded和window-onload的触发时机不同在哪-参考","aria-hidden":"true"},"#",-1),b={href:"https://juejin.cn/post/6844903623583891469",target:"_blank",rel:"noopener noreferrer"},_=e('<ul><li><strong>DOMContentLoaded</strong>（意思是HTML<strong>下载、解析</strong>完毕之后就触发。）</li></ul><blockquote><p>MDN的解释：当初始的 HTML 文档被完全加载（下载）和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。</p></blockquote><ul><li><strong>load</strong>（意思是页面的html、css、js、图片等资源都已经加载完之后才会触发 load 事件。）</li></ul><blockquote><p>MDN的解释：<strong>load</strong> 应该仅用于检测一个完全加载的页面 当一个资源及其依赖资源已完成加载时，将触发load事件。</p></blockquote><h2 id="defer和-async区别" tabindex="-1"><a class="header-anchor" href="#defer和-async区别" aria-hidden="true">#</a> defer和 async区别</h2>',5),f={href:"https://juejin.cn/post/6992371218481414152",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/6894629999215640583",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对于 <span class="token constant">HTML</span> 标签<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><span class="token template-punctuation string">\`</span></span>。
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span> async<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span> defer<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+'" alt="图解"></p><blockquote><ol><li>既没有defer也没有async属性，则浏览器遇到该script标签时，会立即加载并执行指定的脚本。执行完毕后，才继续解析后面的标签。</li><li>有async 属性，浏览器遇到该script标签时，加载脚本的过程与解析后面标签的过程同时进行。加载完毕后，单独执行该脚本。</li><li>有defer属性，浏览器遇到该script标签时，加载脚本的过程与解析后面标签的过程同时进行。但是执行脚本的过程，在解析完所有元素之后才执行。可以这样理解：defer本身就有推迟的意思，在加载完脚本后，将执行过程推迟到最后。❗❗<strong>延迟脚本总是按照指定它们的顺序执行。</strong></li></ol></blockquote><h2 id="浏览器安全" tabindex="-1"><a class="header-anchor" href="#浏览器安全" aria-hidden="true">#</a> 浏览器安全</h2><h3 id="当前域的-cookie-都可以通过-js-在当前域下获取-错" tabindex="-1"><a class="header-anchor" href="#当前域的-cookie-都可以通过-js-在当前域下获取-错" aria-hidden="true">#</a> 当前域的 cookie 都可以通过 js 在当前域下获取？错</h3><p>cookie中设置了<code>httponly</code>后js脚本将无法获取cookie信息，这样可以防范<code>xss</code>攻击</p>',6);function y(w,M){const a=p("ExternalLinkIcon");return c(),l("div",null,[d,k,s("ul",null,[s("li",null,[s("a",g,[n("参考"),t(a)])])]),h,s("h2",m,[v,n(" DOMContentLoaded和window.onload的触发时机不同在哪？"),s("a",b,[n("参考"),t(a)])]),_,s("p",null,[s("a",f,[n("参考"),t(a)]),n(),s("a",q,[n("参考2"),t(a)]),n(),s("a",x,[n("图解参考三"),t(a)])]),j])}const D=o(u,[["render",y],["__file","browser.html.vue"]]);export{D as default};
