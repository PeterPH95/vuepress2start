import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app.cf875173.js";const i="/vuepress2start/assets/vue2_lifetime.95ec5090.png",u="/vuepress2start/assets/Vue2双向绑定原理.75ef090e.png",r={},k=p(`<h2 id="vue2-项目遇到的问题" tabindex="-1"><a class="header-anchor" href="#vue2-项目遇到的问题" aria-hidden="true">#</a> Vue2 项目遇到的问题</h2><h3 id="vue2-中设置别名-的方式" tabindex="-1"><a class="header-anchor" href="#vue2-中设置别名-的方式" aria-hidden="true">#</a> <code>Vue2</code> 中设置别名 <code>@</code> 的方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/build/webpack.base.conf.js 中进行配置</span>
<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;vue$&#39;</span><span class="token operator">:</span> <span class="token string">&#39;vue/dist/vue.esm.js&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue-路由独有的生命周期钩子函数" tabindex="-1"><a class="header-anchor" href="#vue-路由独有的生命周期钩子函数" aria-hidden="true">#</a> <code>Vue</code> 路由独有的生命周期钩子函数</h3>`,4),d={href:"https://v2.cn.vuejs.org/v2/api/#activated",target:"_blank",rel:"noopener noreferrer"},v=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// App.vue，被 keep-alive 缓存的组件激活时调用 </span>
<span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">&quot;NotFound&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
<span class="token comment">// NotFount.vue</span>
<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">timer</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 路由组件展示在页面中调用</span>
<span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;组件被激活了&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 可以设置定时器</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 路由组件不展示在页面时调用</span>
<span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;组件失活了&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="登录时获取登录的地理位置" tabindex="-1"><a class="header-anchor" href="#登录时获取登录的地理位置" aria-hidden="true">#</a> 登录时获取登录的地理位置</h3>`,2),m={href:"https://blog.csdn.net/qq_46302247/article/details/123200329",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cli.vuejs.org/zh/config/#devserver-proxy",target:"_blank",rel:"noopener noreferrer"},g={href:"http://myip.ipip.net/",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js配置</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/cli-service&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// https://www.bilibili.com/index/ding.json  </span>
      <span class="token string-property property">&#39;/aa&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;https://www.bilibili.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//如果要代理 websockets，配置这个参数</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//用于控制代理服务器请求头中的host值；</span>
        <span class="token comment">// 若changeOrigin: true时发送请求，代理服务器请求头中的host值与后端服务器的host值一样</span>
        <span class="token comment">// 若changeOrigin: false时发送请求，代理服务器请求头中的host值不变（即：http://localhost:8080）</span>
        <span class="token comment">// ws 和 changeOrigin的默认值都是true，一般都把changeOrigin设置为true</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;^/aa&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;/address&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://myip.ipip.net&#39;</span><span class="token punctuation">,</span><span class="token comment">//获取地址的域名</span>
        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//允许跨域</span>
        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;^/address&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token comment">//以&#39;/address&#39;标识请求用代理，实际请求时重写去掉&#39;/address&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 请求文件 api/index.js 中设置</span>
<span class="token comment">// 实际访问 http://myip.ipip.net</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getAddr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/address&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="页面刷新的后果-白屏" tabindex="-1"><a class="header-anchor" href="#页面刷新的后果-白屏" aria-hidden="true">#</a> 页面刷新的后果(白屏)</h3><ul><li><code>Vue</code>实例会重走生命周期</li><li><code>Vuex</code>会丢失数据，因为数据都在缓存中，未持久化</li><li><code>router</code>路由也会重置，通过路由表返回的动态路由丢失，可以在<code>vue</code>实例中的钩子函数<code>crated()</code>里重新获取</li></ul><h3 id="对-vue-中请求和数据的理解" tabindex="-1"><a class="header-anchor" href="#对-vue-中请求和数据的理解" aria-hidden="true">#</a> 对 <code>Vue</code> 中请求和数据的理解</h3><ul><li>保存在 Vuex store 中的数据和方法 <ul><li>数据：保存状态的数据，比如<strong>侧边栏的折叠状态</strong>，<strong>面包屑</strong></li><li>方法：驱动视图变化的，<strong>动态的</strong>，会修改数据的方法</li></ul></li><li>保存在 Mock 中的数据方法 <ul><li>数据：这里面主要包含定死的，模拟后端返回的数据（大量）</li><li>方法：对前端发送<code>axios</code>请求接口的拦截，同时设置回调函数，通过回调函数传入<code>axios</code>请求的参数，返回特定的数据</li><li>数据类别：图表和表格数据，根据登录信息返回确定的不同的<strong>路由表</strong>，模拟数据库的<strong>增删改查</strong>操作</li></ul></li></ul><h3 id="不同请求方式获取数据的方式" tabindex="-1"><a class="header-anchor" href="#不同请求方式获取数据的方式" aria-hidden="true">#</a> 不同请求方式获取数据的方式</h3><ul><li><code>GET</code>：参数通过<code>params:{name:&#39;&#39;,page:4,limit:20}</code>对象传递，通过<code>url</code>中获取，需设置<code>param2Obj(url)</code>函数将字符串转换成对象 <ul><li>例如：<code>/api/user/getUser?name=&amp;page=4&amp;limit=20 </code></li></ul></li><li><code>POST</code>：参数通过<code>data</code>对象传递，通过<code>JSON.parse(config.body)</code>获取</li></ul><h3 id="token在项目中的应用场景" tabindex="-1"><a class="header-anchor" href="#token在项目中的应用场景" aria-hidden="true">#</a> <code>Token</code>在项目中的应用场景</h3><ul><li>路由跳转：对未登录的无<code>token</code>的跳转行为进行拦截</li><li>向后端请求数据：拒绝未授权的请求，通过请求拦截器将<code>token</code>设置在请求头的<code>config.headers[&#39;Authorization&#39;] = token</code>中</li></ul><h3 id="i18n国际化" tabindex="-1"><a class="header-anchor" href="#i18n国际化" aria-hidden="true">#</a> <code>i18n</code>国际化</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>适用场景：表格的表头信息，固定的按钮 注意：如果是动态数据的话，一般是不适合国际化的；如果数据是写死的，就在数据源头将其替换为国际化写法即可</p></div><h3 id="click-native-prevent" tabindex="-1"><a class="header-anchor" href="#click-native-prevent" aria-hidden="true">#</a> @click.native.prevent</h3><ul><li><p>给vue的组件绑定事件时候，若不加上<code>native</code>关键字 ，会被<code>vue</code>判断为自定义事件（<code>code1</code>）,</p></li><li><p>如果监听根元素的原生事件，需使用 .native 修饰符(element-ui(el-button)组件中碰到)</p></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--1. 子组件点击鼠标，不会触发show函数 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token comment">&lt;!-- 子组件点击鼠标可以触发show函数 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="父组件给子组件传值-父组件更新数据-子组件数据不更新" tabindex="-1"><a class="header-anchor" href="#父组件给子组件传值-父组件更新数据-子组件数据不更新" aria-hidden="true">#</a> 父组件给子组件传值，父组件更新数据，子组件数据不更新</h3><ul><li>原因：子组件只会在第一次初始化时拿到值并赋值，(注意：直接对象赋值则不受影响，若是非对象属性，则会发生上述情况)，当父组件传给子组件的值改变时，并没有重新给子组件中的变量赋值。</li><li>解决方法一：使用<code>computed</code>或者<code>watch</code>来检测传入的<code>props</code>的改变</li><li>解决方法二：当父组件传给子组件的值改变时，重新渲染子组件：给子组件动态绑定<code>key</code>值，当前时间戳为新的<code>key</code>传给子组件，子组件的因为<code>key</code>的改变被重新渲染(<code>key</code>直接绑定子组件标签那一行)</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addAge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我age++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addCar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我+car<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addNum<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我n++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myNum<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>key<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&quot;./components/HelloWorld.vue&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;App&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    HelloWorld<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;peter&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">myNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">10086</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">addAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>age <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">addCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">[</span><span class="token string">&quot;car&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;奔驰&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>myNum <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h2 id="vue2-组件通信" tabindex="-1"><a class="header-anchor" href="#vue2-组件通信" aria-hidden="true">#</a> <code>Vue2</code> 组件通信</h2><h3 id="vue中组件通信的方式" tabindex="-1"><a class="header-anchor" href="#vue中组件通信的方式" aria-hidden="true">#</a> vue中组件通信的方式</h3>`,21),y={href:"https://mp.weixin.qq.com/s/CMolemxgo74B0bjk1t3-Lw",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("code",null,"props"),s("与"),n("code",null,"emit")],-1),w=n("code",null,"ref",-1),_=n("code",null,"$parent",-1),q=n("code",null,"$children",-1),x={href:"https://v2.cn.vuejs.org/v2/api/#parent",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,[s("事件总线"),n("code",null,"EventBus"),s("与"),n("code",null,"emit"),s("/"),n("code",null,"on")],-1),V=n("code",null,"$attrs",-1),$=n("code",null,"$listeners",-1),N={href:"https://www.cnblogs.com/vickylinj/p/13376391.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://v2.cn.vuejs.org/v2/api/#vm-attrs",target:"_blank",rel:"noopener noreferrer"},D=n("ul",null,[n("li",null,[n("code",null,"$attrs"),s("接收除了props声明外的所有绑定属性（class、style除外）")]),n("li",null,[n("code",null,"$listeners"),s("接收除了带有.native事件修饰符的所有事件监听器")])],-1),C=n("li",null,[n("code",null,"Provide"),s("和"),n("code",null,"inject")],-1),E=n("li",null,[n("code",null,"Vuex")],-1),A={id:"事件总线和vuex的区别-参考",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#事件总线和vuex的区别-参考","aria-hidden":"true"},"#",-1),T=n("code",null,"vuex",-1),M={href:"https://blog.csdn.net/shadowfall/article/details/112005980",target:"_blank",rel:"noopener noreferrer"},P=p(`<ul><li>相同点</li></ul><blockquote><p>都能实现任意组件（父-子，爷-孙，兄弟组件）间的通信 本质上都是一个方法，都是在vue这个实例上去实现的</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">/*--------事件总线-----------*/</span>

<span class="token comment">// 事件总线绑定事件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;handleAdd&#39;</span><span class="token punctuation">,</span>handleAdd<span class="token punctuation">)</span>
<span class="token comment">// 事件总线触发事件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;handleAdd&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
 
<span class="token comment">/*--------状态管理-----------*/</span>
<span class="token comment">// 获取状态</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
<span class="token comment">// 修改状态</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;INCREMENT&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),W={href:"https://blog.csdn.net/shadowfall/article/details/112005980",target:"_blank",rel:"noopener noreferrer"},B=n("blockquote",null,[n("p",null,"bus利用事件抛发(发布订阅)的原理进行传递数据而vuex通过数据劫持")],-1),I=n("h3",{id:"ajax-请求到底应该放在-created-里还是-mounted-里",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ajax-请求到底应该放在-created-里还是-mounted-里","aria-hidden":"true"},"#"),s(" Ajax 请求到底应该放在 created 里还是 mounted 里")],-1),H=n("li",null,"created 和 mounted 都是同步的，API请求是异步的",-1),L=n("code",null,"mounted",-1),F={href:"https://www.bilibili.com/read/cv14696847",target:"_blank",rel:"noopener noreferrer"},R=p('<h2 id="vue2底层" tabindex="-1"><a class="header-anchor" href="#vue2底层" aria-hidden="true">#</a> <code>Vue2</code>底层</h2><h3 id="vue2生命周期" tabindex="-1"><a class="header-anchor" href="#vue2生命周期" aria-hidden="true">#</a> <code>Vue2</code>生命周期</h3><p><img src="'+i+'" alt="图解"></p><h3 id="vue2双向绑定原理-代码复现-简约版" tabindex="-1"><a class="header-anchor" href="#vue2双向绑定原理-代码复现-简约版" aria-hidden="true">#</a> <code>Vue2</code>双向绑定原理，代码复现（简约版）</h3>',4),z={href:"https://www.bilibili.com/video/BV1934y1a7MN",target:"_blank",rel:"noopener noreferrer"},U=n("img",{src:u,alt:"原理图"},null,-1),G=n("li",null,[n("code",null,"html"),s("部分"),n("code",null,"index.html")],-1),J=p(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>打工人: {{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>工资：{{more.salary}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>more.salary<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>
      感谢蛋老师的知识分析
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.bilibili.com/video/BV1934y1a7MN<span class="token punctuation">&quot;</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>原视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;西维&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">more</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">salary</span><span class="token operator">:</span> <span class="token number">1000</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现代码部分<code>vue.js</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Vue2 双向绑定原理</span>

<span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数为对象实例 这个对象用于告知vue需要挂载到哪个元素并挂载数据</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj_instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 给实例赋值对象的data属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> obj_instance<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token comment">// 进行数据劫持 监听对象里属性的变化</span>
    <span class="token function">Observer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Complie</span><span class="token punctuation">(</span>obj_instance<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//数据劫持 —— 监听实例里的数据</span>
<span class="token keyword">function</span> <span class="token function">Observer</span><span class="token punctuation">(</span><span class="token parameter">data_instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 递归出口</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data_instance <span class="token operator">||</span> <span class="token keyword">typeof</span> data_instance <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token comment">// 每次数据劫持一个对象时都创建Dependency实例 用于区分哪个对象对应哪个依赖实例和收集依赖</span>
  <span class="token keyword">const</span> dependency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data_instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用defineProperty后属性里的值会被修改 需要提前保存属性的值</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> data_instance<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 递归劫持data里的子属性</span>
    <span class="token function">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data_instance<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token comment">// 收集数据依赖</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">获取了属性值 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Dependency<span class="token punctuation">.</span>temp <span class="token operator">&amp;&amp;</span> dependency<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dependency<span class="token punctuation">.</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 触发视图更新</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">修改了属性值</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        value <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
        <span class="token comment">// 处理赋值是对象时的情况</span>
        <span class="token function">Observer</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependency<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//模板解析 —— 替换DOM内容 把vue实例上的数据解析到页面上，初始化（只执行一次）</span>
<span class="token comment">// 接收两个参数 1.vue实例挂载的元素&lt;div id=&quot;app&quot;&gt; 2.vue实例</span>
<span class="token keyword">function</span> <span class="token function">Complie</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 使用文档碎片来临时存放DOM元素 减少DOM更新</span>
  <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> child<span class="token punctuation">;</span>
  <span class="token comment">// 将页面里的子节点循环放入文档碎片</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fragment_compile</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 替换fragment里文本节点的内容</span>
  <span class="token keyword">function</span> <span class="token function">fragment_compile</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用正则表达式去匹配并替换节点里的{{}}</span>
    <span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{\\s*(\\S+)\\s*\\}\\}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
    <span class="token comment">// 1. 匹配文本节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 提前保存文本内容 否则文本在被替换一次后 后续的操作都会不生效</span>
      <span class="token comment">// 打工人: {{name}}  =&gt; 打工人：西维 如果不保存后续修改name会匹配不到{{name}} 因为已经被替换</span>
      <span class="token keyword">const</span> texts <span class="token operator">=</span> node<span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>
      <span class="token comment">// 获取正则表达式匹配文本字符串获得的所有结果</span>
      <span class="token keyword">const</span> result_regex <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result_regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> arr <span class="token operator">=</span> result_regex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// more.salary =&gt; [&#39;more&#39;, &#39;salary&#39;]</span>
        <span class="token comment">// 使用reduce归并获取属性对应的值 = vm.$data[&#39;more&#39;] =&gt; vm.$data[&#39;more&#39;][&#39;salary&#39;]</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面的这一步已经替换了内容</span>
        node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> texts<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 在节点值替换内容时 即模板解析的时候 添加订阅者</span>
        <span class="token comment">// 通过闭包的方式获取 node.nodeValue 从而在将来使用 setter 修改属性值时触发视图更新</span>
        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> result_regex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          node<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> texts<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2. 匹配 input 节点</span>
    <span class="token comment">// 替换绑定了v-model属性的input节点的内容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">&quot;INPUT&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> attr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
      attr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> value <span class="token operator">=</span> item<span class="token punctuation">.</span>nodeValue
            <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
          node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>

          <span class="token comment">// 保证将来使用 setter 修改属性值时触发视图更新</span>
          <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> item<span class="token punctuation">.</span>nodeValue<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>value <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 通过绑定事件实现 View -&gt; VM 的更新</span>
          node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// [&#39;more&#39;, &#39;salary&#39;]</span>
            <span class="token keyword">const</span> arr1 <span class="token operator">=</span> item<span class="token punctuation">.</span>nodeValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// [&#39;more&#39;]</span>
            <span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// vm.$data.more</span>
            <span class="token keyword">const</span> final <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
              <span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">,</span>
              vm<span class="token punctuation">.</span>$data
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// vm.$data.more[&#39;salary&#39;] = e.target.value</span>
            final<span class="token punctuation">[</span>arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 对子节点的所有子节点也进行替换内容操作</span>
    node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fragment_compile</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 操作完成后将文档碎片添加到页面</span>
  <span class="token comment">// 此时已经能将vm的数据渲染到页面上 但还未实现数据变动的及时更新</span>
  vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//依赖 —— 实现发布-订阅模式 用于存放订阅者和通知订阅者更新</span>
<span class="token keyword">class</span> <span class="token class-name">Dependency</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于收集依赖data的订阅者信息</span>
  <span class="token punctuation">}</span>
  <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 订阅者</span>
<span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
  <span class="token comment">// 需要vue实例上的属性 以获取更新什么数据</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span><span class="token comment">// 记录如何更新文本内容</span>
    <span class="token comment">//1. 临时属性 保存一个 Watcher 实例</span>
    Dependency<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 触发 getter 把订阅者实例存储到 Dependency 实例的 subscribers 里面</span>
    key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取属性触发getter --&gt; vm.$data[&#39;more&#39;][&#39;salary&#39;]</span>
    <span class="token comment">//3. 置空，防止订阅者多次加入到依赖实例数组里</span>
    Dependency<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key
      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function Y(K,Q){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,n("ul",null,[n("li",null,[s("当路由匹配到404页面时，会触发什么钩子函数，离开时触发什么钩子函数？"),n("a",d,[s("参考"),t(a)])])]),v,n("ul",null,[n("li",null,[n("a",m,[s("Node 代理解决跨域"),t(a)]),n("a",b,[s("官方文档"),t(a)])]),n("li",null,[n("a",g,[s("接口地址"),t(a)])])]),h,n("ul",null,[n("li",null,[n("a",y,[s("参考"),t(a)])]),f,n("li",null,[s("使用"),w,s("与"),_,s("/"),q,s(),n("a",x,[s("vue2"),t(a)])]),j,n("li",null,[V,s("/"),$,s(),n("a",N,[s("参考"),t(a)]),s(),n("a",O,[s("vue2"),t(a)]),D]),C,E]),n("h3",A,[S,s(" 事件总线和"),T,s("的区别？"),n("a",M,[s("参考"),t(a)])]),P,n("ul",null,[n("li",null,[s("不同点"),n("a",W,[s("参考"),t(a)])])]),B,I,n("ul",null,[H,n("li",null,[s("建议放在"),L,s("中 "),n("a",F,[s("参考"),t(a)])])]),R,n("ul",null,[n("li",null,[n("a",z,[s("参考"),t(a)]),U]),G]),J])}const Z=e(r,[["render",Y],["__file","vue.html.vue"]]);export{Z as default};
